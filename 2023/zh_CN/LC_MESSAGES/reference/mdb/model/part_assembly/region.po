# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, WANG Hailin
# This file is distributed under the same license as the abqpy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: abqpy \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-05-13 03:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../../reference/mdb/model/part_assembly/region.md:1
msgid "Region"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:3
msgid ""
"Region commands are used to create part and assembly sets or surfaces from"
" elements, nodes, and geometry. For more information, see Specifying a "
"region. Part and assembly objects have the following member, a repository "
"of Set objects:"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:5
msgid "sets"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:7
msgid "In turn, a Set object can contain any one of the following types:"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:9
#: ../../../reference/mdb/model/part_assembly/region.md:18
msgid "elements"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:10
#: ../../../reference/mdb/model/part_assembly/region.md:17
msgid "nodes"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:11
msgid "geometry"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:13
msgid ""
"A Set object can contain a number of entities of a single type (nodes, "
"elements, or geometry) or a combination of node and element types. "
"However, except for nodes and elements, a Set object cannot contain a "
"combination of types."
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:15
msgid "The following are members of the Set object:"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:19
msgid "cells"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:20
msgid "faces"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:21
msgid "edges"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:22
msgid "vertices"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:23
msgid "referencePoints"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:25
msgid ""
"Region commands are also used to create surfaces on the assembly. Surfaces"
" are sets with additional sidedness information."
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:27
msgid ""
"Part sets contain regions of a part. You can assign section definitions to"
" a set created by selecting a region of a part. The part sets can be "
"accessed from the instance; however, the section definition you assigned "
"to a region is copied automatically to all instances of that part in the "
"assembly."
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:29
msgid ""
"Assembly sets contain regions of an assembly and are used by many commands"
" that operate on the assembly. For example, you can apply a load or "
"boundary condition to a set created by selecting a region of the assembly."
" Sets can include regions from multiple part instances."
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:31
msgid "Create regions for Part"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:41
msgid "Create regions for Assembly"
msgstr ""

#: ../../../reference/mdb/model/part_assembly/region.md:52
msgid "Other Classes"
msgstr ""

#~ msgid "Bases: :py:class:`~abaqus.Region.RegionPartBase.RegionPartBase`"
#~ msgstr ""

#~ msgid ""
#~ "The following commands operate on Part"
#~ " objects. For more information about "
#~ "the Part object, see Part object."
#~ msgstr ""

#~ msgid "This object can be accessed by::"
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionPart on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-partregpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid "Public Data Attributes:"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`geometryValidity "
#~ "<abaqus.Part.PartBase.PartBase.geometryValidity>`\\"
#~ msgstr ""

#~ msgid "A Boolean specifying the validity of the geometry of the part."
#~ msgstr ""

#~ msgid ":py:obj:`isOutOfDate <abaqus.Part.PartBase.PartBase.isOutOfDate>`\\"
#~ msgstr ""

#~ msgid ""
#~ "An Int specifying that feature "
#~ "parameters have been modified but that"
#~ " the part has not been regenerated."
#~ msgstr ""

#~ msgid ":py:obj:`timeStamp <abaqus.Part.PartBase.PartBase.timeStamp>`\\"
#~ msgstr ""

#~ msgid "A Float specifying when the part was last modified."
#~ msgstr ""

#~ msgid ":py:obj:`vertices <abaqus.Part.PartBase.PartBase.vertices>`\\"
#~ msgstr ""

#~ msgid "A VertexArray object specifying all the vertices in the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`ignoredVertices "
#~ "<abaqus.Part.PartBase.PartBase.ignoredVertices>`\\"
#~ msgstr ""

#~ msgid ""
#~ "An IgnoredVertexArray object specifying all"
#~ " the ignored vertices in the part."
#~ msgstr ""

#~ msgid ":py:obj:`edges <abaqus.Part.PartBase.PartBase.edges>`\\"
#~ msgstr ""

#~ msgid "An EdgeArray object specifying all the edges in the part."
#~ msgstr ""

#~ msgid ":py:obj:`ignoredEdges <abaqus.Part.PartBase.PartBase.ignoredEdges>`\\"
#~ msgstr ""

#~ msgid ""
#~ "An IgnoredEdgeArray object specifying all "
#~ "the ignored edges in the part."
#~ msgstr ""

#~ msgid ":py:obj:`faces <abaqus.Part.PartBase.PartBase.faces>`\\"
#~ msgstr ""

#~ msgid "A FaceArray object specifying all the faces in the part."
#~ msgstr ""

#~ msgid ":py:obj:`cells <abaqus.Part.PartBase.PartBase.cells>`\\"
#~ msgstr ""

#~ msgid "A CellArray object specifying all the cells in the part."
#~ msgstr ""

#~ msgid ":py:obj:`features <abaqus.Part.PartBase.PartBase.features>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of Feature objects "
#~ "specifying all the features in the "
#~ "part."
#~ msgstr ""

#~ msgid ":py:obj:`featuresById <abaqus.Part.PartBase.PartBase.featuresById>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of Feature objects "
#~ "specifying all Feature objects in the"
#~ " part."
#~ msgstr ""

#~ msgid ":py:obj:`datums <abaqus.Part.PartBase.PartBase.datums>`\\"
#~ msgstr ""

#~ msgid "A repository of Datum objects specifying all the datums in the part."
#~ msgstr ""

#~ msgid ":py:obj:`elements <abaqus.Part.PartBase.PartBase.elements>`\\"
#~ msgstr ""

#~ msgid "A MeshElementArray object specifying all the elements in the part."
#~ msgstr ""

#~ msgid ":py:obj:`elemFaces <abaqus.Part.PartBase.PartBase.elemFaces>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of MeshFace objects "
#~ "specifying all the element faces in "
#~ "the part."
#~ msgstr ""

#~ msgid ":py:obj:`elementFaces <abaqus.Part.PartBase.PartBase.elementFaces>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A MeshFaceArray object specifying all "
#~ "the unique element faces in the "
#~ "part."
#~ msgstr ""

#~ msgid ":py:obj:`nodes <abaqus.Part.PartBase.PartBase.nodes>`\\"
#~ msgstr ""

#~ msgid "A MeshNodeArray object specifying all the nodes in the part."
#~ msgstr ""

#~ msgid ":py:obj:`retainedNodes <abaqus.Part.PartBase.PartBase.retainedNodes>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A MeshNodeArray object specifying all "
#~ "the retained nodes in the substructure"
#~ " part."
#~ msgstr ""

#~ msgid ":py:obj:`sets <abaqus.Part.PartBase.PartBase.sets>`\\"
#~ msgstr ""

#~ msgid "A repository of Set objects specifying for more information, see Set."
#~ msgstr ""

#~ msgid ":py:obj:`allSets <abaqus.Part.PartBase.PartBase.allSets>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of Set objects specifying"
#~ " the contents of the **allSets** "
#~ "repository is the same as the "
#~ "contents of the **sets** repository."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`allInternalSets "
#~ "<abaqus.Part.PartBase.PartBase.allInternalSets>`\\"
#~ msgstr ""

#~ msgid "A repository of Set objects specifying picked regions."
#~ msgstr ""

#~ msgid ":py:obj:`surfaces <abaqus.Part.PartBase.PartBase.surfaces>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of Surface objects "
#~ "specifying for more information, see "
#~ "Surface."
#~ msgstr ""

#~ msgid ":py:obj:`allSurfaces <abaqus.Part.PartBase.PartBase.allSurfaces>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of Surface objects "
#~ "specifying the contents of the "
#~ "**allSurfaces** repository is the same "
#~ "as the contents of the **surfaces** "
#~ "repository."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`allInternalSurfaces "
#~ "<abaqus.Part.PartBase.PartBase.allInternalSurfaces>`\\"
#~ msgstr ""

#~ msgid "A repository of Surface objects specifying picked regions."
#~ msgstr ""

#~ msgid ":py:obj:`skins <abaqus.Part.PartBase.PartBase.skins>`\\"
#~ msgstr ""

#~ msgid "A repository of Skin objects specifying the skins created on the part."
#~ msgstr ""

#~ msgid ":py:obj:`stringers <abaqus.Part.PartBase.PartBase.stringers>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of Stringer objects "
#~ "specifying the stringers created on the"
#~ " part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`referencePoints "
#~ "<abaqus.Part.PartBase.PartBase.referencePoints>`\\"
#~ msgstr ""

#~ msgid "A repository of ReferencePoint objects."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`engineeringFeatures "
#~ "<abaqus.Part.PartBase.PartBase.engineeringFeatures>`\\"
#~ msgstr ""

#~ msgid "An EngineeringFeature object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`sectionAssignments "
#~ "<abaqus.Part.PartBase.PartBase.sectionAssignments>`\\"
#~ msgstr ""

#~ msgid "A SectionAssignmentArray object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`materialOrientations "
#~ "<abaqus.Part.PartBase.PartBase.materialOrientations>`\\"
#~ msgstr ""

#~ msgid "A MaterialOrientationArray object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`compositeLayups "
#~ "<abaqus.Part.PartBase.PartBase.compositeLayups>`\\"
#~ msgstr ""

#~ msgid "A repository of CompositeLayup objects."
#~ msgstr ""

#~ msgid ":py:obj:`elemEdges <abaqus.Part.PartBase.PartBase.elemEdges>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of MeshEdge objects "
#~ "specifying all the element edges in "
#~ "the part."
#~ msgstr ""

#~ msgid ":py:obj:`elementEdges <abaqus.Part.PartBase.PartBase.elementEdges>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A MeshEdgeArray object specifying all "
#~ "the unique element edges in the "
#~ "part."
#~ msgstr ""

#~ msgid ":py:obj:`name <abaqus.Part.PartBase.PartBase.name>`\\"
#~ msgstr ""

#~ msgid "A String specifying the repository key."
#~ msgstr ""

#~ msgid ":py:obj:`id <abaqus.Part.PartBase.PartBase.id>`\\"
#~ msgstr ""

#~ msgid "An Int specifying the ID of the feature."
#~ msgstr ""

#~ msgid ":py:obj:`name <abaqus.Feature.Feature.Feature.name>`\\"
#~ msgstr ""

#~ msgid ":py:obj:`id <abaqus.Feature.Feature.Feature.id>`\\"
#~ msgstr ""

#~ msgid "Public Methods:"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Surface "
#~ "<abaqus.Region.RegionPart.RegionPart.Surface>`\\ "
#~ "\\(\\[side1Faces\\, side2Faces\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a surface from "
#~ "a sequence of objects in a model"
#~ " database. The surface will apply to"
#~ " the sides specified by the "
#~ "arguments.For example::."
#~ msgstr ""

#~ msgid ":py:obj:`Set <abaqus.Region.RegionPart.RegionPart.Set>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Skin <abaqus.Region.RegionPart.RegionPart.Skin>`\\ "
#~ "\\(name\\[\\, faces\\, edges\\, elementFaces\\, "
#~ "...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a skin from a"
#~ " sequence of objects in a model "
#~ "database."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`EditSkin "
#~ "<abaqus.Region.RegionPart.RegionPart.EditSkin>`\\ \\(\\[name\\,"
#~ " faces\\, edges\\, elementFaces\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "This method modifies underlying entities of the selected skin."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Stringer "
#~ "<abaqus.Region.RegionPart.RegionPart.Stringer>`\\ \\(name\\[\\,"
#~ " edges\\, elementEdges\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a stringer from "
#~ "a sequence of objects in a model"
#~ " database."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`SetByBoolean "
#~ "<abaqus.Region.RegionPart.RegionPart.SetByBoolean>`\\ \\(name\\,"
#~ " sets\\[\\, operation\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a set by "
#~ "performing a boolean operation on two"
#~ " or more input sets."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`SetFromColor "
#~ "<abaqus.Region.RegionPart.RegionPart.SetFromColor>`\\ \\(name\\,"
#~ " color\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a set containing "
#~ "faces of the part marked with a"
#~ " specified color attribute."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`SetFromElementLabels "
#~ "<abaqus.Region.RegionPart.RegionPart.SetFromElementLabels>`\\ "
#~ "\\(name\\, elementLabels\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a set from a"
#~ " sequence of element labels in a "
#~ "model database."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`SetFromNodeLabels "
#~ "<abaqus.Region.RegionPart.RegionPart.SetFromNodeLabels>`\\ "
#~ "\\(name\\, nodeLabels\\[\\, unsorted\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a set from a"
#~ " sequence of node labels in a "
#~ "model database."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`MapSetsFromOdb "
#~ "<abaqus.Region.RegionPart.RegionPart.MapSetsFromOdb>`\\ "
#~ "\\(odbPath\\, odbSets\\[\\, partSets\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates sets based on "
#~ "mapping sets from element centroid "
#~ "locations in an Odb."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`clashSets "
#~ "<abaqus.Region.RegionPartBase.RegionPartBase.clashSets>`\\ "
#~ "\\(arg1\\, arg2\\)"
#~ msgstr ""

#~ msgid ""
#~ "This command prints a message describing"
#~ " the relationship between the contents "
#~ "of two sets."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`markSetInternal "
#~ "<abaqus.Region.RegionPartBase.RegionPartBase.markSetInternal>`\\ "
#~ "\\(setName\\, internalSet\\)"
#~ msgstr ""

#~ msgid "This command marks the given Set as internal or external."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`markSurfaceInternal "
#~ "<abaqus.Region.RegionPartBase.RegionPartBase.markSurfaceInternal>`\\"
#~ " \\(setName\\, internalSurface\\)"
#~ msgstr ""

#~ msgid "This command marks the given Surface as internal or external."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`isSetInternal "
#~ "<abaqus.Region.RegionPartBase.RegionPartBase.isSetInternal>`\\ "
#~ "\\(setName\\)"
#~ msgstr ""

#~ msgid "This command returns a flag indicating whether the Set is Internal."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`isSurfaceInternal "
#~ "<abaqus.Region.RegionPartBase.RegionPartBase.isSurfaceInternal>`\\ "
#~ "\\(surfaceName\\)"
#~ msgstr ""

#~ msgid "This command returns a flag indicating whether the Surface is Internal."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`deleteSets "
#~ "<abaqus.Region.RegionPartBase.RegionPartBase.deleteSets>`\\ "
#~ "\\(setNames\\)"
#~ msgstr ""

#~ msgid "This command deletes the given sets from the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`deleteSurfaces "
#~ "<abaqus.Region.RegionPartBase.RegionPartBase.deleteSurfaces>`\\ "
#~ "\\(surfaceNames\\)"
#~ msgstr ""

#~ msgid "This command deletes the given surfaces from the part."
#~ msgstr ""

#~ msgid ":py:obj:`__init__ <abaqus.Part.PartBase.PartBase.__init__>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartFromBooleanCut "
#~ "<abaqus.Part.PartBase.PartBase.PartFromBooleanCut>`\\ \\(name\\,"
#~ " instanceToBeCut\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Part in the"
#~ " parts repository after subtracting or "
#~ "cutting the geometries of a group "
#~ "of part instances from that of a"
#~ " base part instance."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartFromBooleanMerge "
#~ "<abaqus.Part.PartBase.PartBase.PartFromBooleanMerge>`\\ "
#~ "\\(name\\, instances\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Part in the"
#~ " parts repository after merging two "
#~ "or more part instances."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartFromExtrude2DMesh "
#~ "<abaqus.Part.PartBase.PartBase.PartFromExtrude2DMesh>`\\ "
#~ "\\(name\\, part\\, depth\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Part object "
#~ "by extruding an existing two-dimensional"
#~ " orphan mesh Part object in the "
#~ "positive **Z** direction and places it"
#~ " in the parts repository."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartFromGeometryFile "
#~ "<abaqus.Part.PartBase.PartBase.PartFromGeometryFile>`\\ "
#~ "\\(name\\, geometryFile\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Part object "
#~ "and places it in the parts "
#~ "repository."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartFromInstanceMesh "
#~ "<abaqus.Part.PartBase.PartBase.PartFromInstanceMesh>`\\ "
#~ "\\(name\\[\\, partInstances\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Part object "
#~ "containing the mesh found in the "
#~ "supplied PartInstance objects and places "
#~ "the new Part object in the parts"
#~ " repository."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartFromMesh "
#~ "<abaqus.Part.PartBase.PartBase.PartFromMesh>`\\ \\(name\\[\\,"
#~ " copySets\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Part object "
#~ "containing the mesh found in the "
#~ "part and places the new Part "
#~ "object in the parts repository."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartFromMeshMirror "
#~ "<abaqus.Part.PartBase.PartBase.PartFromMeshMirror>`\\ \\(name\\,"
#~ " part\\, point1\\, point2\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Part object "
#~ "by mirroring an existing orphan mesh "
#~ "Part object about a specified plane "
#~ "and places it in the parts "
#~ "repository."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartFromNodesAndElements "
#~ "<abaqus.Part.PartBase.PartBase.PartFromNodesAndElements>`\\ "
#~ "\\(name\\, ...\\[\\, twist\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Part object "
#~ "from nodes and elements and places "
#~ "it in the parts repository."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartFromOdb "
#~ "<abaqus.Part.PartBase.PartBase.PartFromOdb>`\\ \\(name\\, "
#~ "odb\\[\\, fileName\\, instance\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an orphan mesh "
#~ "Part object by reading an output "
#~ "database."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartFromSection3DMeshByPlane "
#~ "<abaqus.Part.PartBase.PartBase.PartFromSection3DMeshByPlane>`\\ "
#~ "\\(name\\, part\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Part object "
#~ "by cutting an existing three-dimensional"
#~ " orphan mesh Part object by a "
#~ "plane and places it in the parts"
#~ " repository."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartFromSubstructure "
#~ "<abaqus.Part.PartBase.PartBase.PartFromSubstructure>`\\ "
#~ "\\(name\\, substructureFile\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a substructure Part"
#~ " object by reading a substructure sim"
#~ " file and places it in the "
#~ "parts repository."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Part2DGeomFrom2DMesh "
#~ "<abaqus.Part.PartBase.PartBase.Part2DGeomFrom2DMesh>`\\ "
#~ "\\(name\\, part\\, featureAngle\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a geometric Part "
#~ "object from the outline of an "
#~ "existing two-dimensional orphan mesh "
#~ "Part object and places it in the"
#~ " parts repository."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`setValues <abaqus.Part.PartBase.PartBase.setValues>`\\"
#~ " \\(\\*args\\, \\*\\*kwargs\\)"
#~ msgstr ""

#~ msgid "This method modifies the Part object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`addGeomToSketch "
#~ "<abaqus.Part.PartBase.PartBase.addGeomToSketch>`\\ \\(sketch\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method converts a part into a"
#~ " sketch by projecting all of the "
#~ "edges of the part onto the X-Y "
#~ "plane of the sketch."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`assignThickness "
#~ "<abaqus.Part.PartBase.PartBase.assignThickness>`\\ "
#~ "\\(faces\\[\\, thickness\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "This method assigns thickness data to shell faces."
#~ msgstr ""

#~ msgid ":py:obj:`backup <abaqus.Part.PartBase.PartBase.backup>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method makes a backup copy of the features in the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`checkGeometry "
#~ "<abaqus.Part.PartBase.PartBase.checkGeometry>`\\ "
#~ "\\(\\[detailed\\, reportFacetErrors\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method checks the validity of "
#~ "the geometry of the part and "
#~ "prints a count of all topological "
#~ "entities on the part (faces, edges, "
#~ "vertices, etc.)."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`clearGeometryCache "
#~ "<abaqus.Part.PartBase.PartBase.clearGeometryCache>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method clears the geometry cache."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`deleteAllFeatures "
#~ "<abaqus.Part.PartBase.PartBase.deleteAllFeatures>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method deletes all the features in the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`deleteFeatures "
#~ "<abaqus.Part.PartBase.PartBase.deleteFeatures>`\\ "
#~ "\\(featureNames\\)"
#~ msgstr ""

#~ msgid "This method deletes the given features."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getAngle <abaqus.Part.PartBase.PartBase.getAngle>`\\"
#~ " \\(plane1\\, plane2\\, line1\\, line2\\[\\, "
#~ "...\\]\\)"
#~ msgstr ""

#~ msgid "This method returns the angle between the specified entities."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getArea <abaqus.Part.PartBase.PartBase.getArea>`\\ "
#~ "\\(faces\\[\\, relativeAccuracy\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method returns the total surface"
#~ " area of a given face or group"
#~ " of faces."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getAssociatedCADPaths "
#~ "<abaqus.Part.PartBase.PartBase.getAssociatedCADPaths>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method returns the paths to the associated CAD part and root file."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getCADParameters "
#~ "<abaqus.Part.PartBase.PartBase.getCADParameters>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method returns the names and "
#~ "values of the CAD parameters associated"
#~ " with the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getCentroid "
#~ "<abaqus.Part.PartBase.PartBase.getCentroid>`\\ \\(faces\\, "
#~ "cells\\[\\, relativeAccuracy\\]\\)"
#~ msgstr ""

#~ msgid "Location of the centroid of a given face/cell or group of faces/cells."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getCoordinates "
#~ "<abaqus.Part.PartBase.PartBase.getCoordinates>`\\ \\(entity\\,"
#~ " csys\\)"
#~ msgstr ""

#~ msgid "This method returns the coordinates of specified point."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getCurvature "
#~ "<abaqus.Part.PartBase.PartBase.getCurvature>`\\ \\(edges\\[\\,"
#~ " samplePoints\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method returns the maximum "
#~ "curvature of a given edge or group"
#~ " of edges."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getDistance "
#~ "<abaqus.Part.PartBase.PartBase.getDistance>`\\ \\(entity1\\, "
#~ "entity2\\)"
#~ msgstr ""

#~ msgid ""
#~ "Depending on the arguments provided, "
#~ "this method returns one of the "
#~ "following:"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getLength <abaqus.Part.PartBase.PartBase.getLength>`\\"
#~ " \\(edges\\)"
#~ msgstr ""

#~ msgid "This method returns the length of a given edge or group of edges."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getPerimeter "
#~ "<abaqus.Part.PartBase.PartBase.getPerimeter>`\\ \\(faces\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method returns the total perimeter"
#~ " of a given face or group of"
#~ " faces."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getVolume <abaqus.Part.PartBase.PartBase.getVolume>`\\"
#~ " \\(cells\\[\\, relativeAccuracy\\]\\)"
#~ msgstr ""

#~ msgid "This method returns the volume area of a given cell or group of cells."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getMassProperties "
#~ "<abaqus.Part.PartBase.PartBase.getMassProperties>`\\ "
#~ "\\(\\[regions\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "This method returns the mass properties of a part or region."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getFeatureFaces "
#~ "<abaqus.Part.PartBase.PartBase.getFeatureFaces>`\\ \\(name\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method returns a sequence of "
#~ "Face objects that are created by "
#~ "the given feature."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getFeatureEdges "
#~ "<abaqus.Part.PartBase.PartBase.getFeatureEdges>`\\ \\(name\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method returns a sequence of "
#~ "Edge objects that are created by "
#~ "the given feature."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getFeatureCells "
#~ "<abaqus.Part.PartBase.PartBase.getFeatureCells>`\\ \\(name\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method returns a sequence of "
#~ "Cell objects that are created by "
#~ "the given feature."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getFeatureVertices "
#~ "<abaqus.Part.PartBase.PartBase.getFeatureVertices>`\\ \\(name\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method returns a sequence of "
#~ "ConstrainedSketchVertex objects that are "
#~ "created by the given feature."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`isAlignedWithSketch "
#~ "<abaqus.Part.PartBase.PartBase.isAlignedWithSketch>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method checks if the normal "
#~ "of an analytical rigid surface part "
#~ "is aligned with that of its "
#~ "sketch."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`printAssignedSections "
#~ "<abaqus.Part.PartBase.PartBase.printAssignedSections>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method prints information on each"
#~ " section that has been assigned to"
#~ " a region of the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`projectEdgesOntoSketch "
#~ "<abaqus.Part.PartBase.PartBase.projectEdgesOntoSketch>`\\ "
#~ "\\(sketch\\, edges\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method projects the selected edges"
#~ " of a part onto the specified "
#~ "ConstrainedSketch object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`projectReferencesOntoSketch "
#~ "<abaqus.Part.PartBase.PartBase.projectReferencesOntoSketch>`\\ "
#~ "\\(sketch\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method projects the vertices of "
#~ "specified edges, and datum points from"
#~ " the part onto the specified "
#~ "ConstrainedSketch object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`queryAttributes "
#~ "<abaqus.Part.PartBase.PartBase.queryAttributes>`\\ "
#~ "\\(\\[printResults\\]\\)"
#~ msgstr ""

#~ msgid "This method prints the following information about a part:"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`queryCachedStates "
#~ "<abaqus.Part.PartBase.PartBase.queryCachedStates>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method displays the position of "
#~ "geometric states relative to the "
#~ "sequence of features in the part "
#~ "cache."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`queryGeometry "
#~ "<abaqus.Part.PartBase.PartBase.queryGeometry>`\\ "
#~ "\\(\\[relativeAccuracy\\, printResults\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`queryRegionsMissingSections "
#~ "<abaqus.Part.PartBase.PartBase.queryRegionsMissingSections>`\\ "
#~ "\\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method returns all regions in "
#~ "the part that do not have a "
#~ "section assignment but require one for"
#~ " analysis."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`queryDisjointPlyRegions "
#~ "<abaqus.Part.PartBase.PartBase.queryDisjointPlyRegions>`\\ "
#~ "\\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method provides a list of all"
#~ " composite plys in the current part"
#~ " which have disjoint regions."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`regenerate "
#~ "<abaqus.Part.PartBase.PartBase.regenerate>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method regenerates a part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`regenerationWarnings "
#~ "<abaqus.Part.PartBase.PartBase.regenerationWarnings>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method prints any regeneration "
#~ "warnings associated with the features."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`removeInvalidGeometry "
#~ "<abaqus.Part.PartBase.PartBase.removeInvalidGeometry>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "Removes all invalid entities from the part, leaving a valid part."
#~ msgstr ""

#~ msgid ":py:obj:`restore <abaqus.Part.PartBase.PartBase.restore>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method restores the parameters of"
#~ " all features in the assembly to "
#~ "the value they had before a failed"
#~ " regeneration."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`resumeAllFeatures "
#~ "<abaqus.Part.PartBase.PartBase.resumeAllFeatures>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method resumes all the suppressed features in the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`resumeFeatures "
#~ "<abaqus.Part.PartBase.PartBase.resumeFeatures>`\\ "
#~ "\\(featureNames\\)"
#~ msgstr ""

#~ msgid "This method resumes the specified suppressed features in the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`resumeLastSetFeatures "
#~ "<abaqus.Part.PartBase.PartBase.resumeLastSetFeatures>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method resumes the last set "
#~ "of features to be suppressed in "
#~ "the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`saveGeometryCache "
#~ "<abaqus.Part.PartBase.PartBase.saveGeometryCache>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method caches the current geometry."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`setAssociatedCADPaths "
#~ "<abaqus.Part.PartBase.PartBase.setAssociatedCADPaths>`\\ "
#~ "\\(\\[partFile\\, rootFile\\]\\)"
#~ msgstr ""

#~ msgid "This method sets the paths to the associated CAD part and root file."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`suppressFeatures "
#~ "<abaqus.Part.PartBase.PartBase.suppressFeatures>`\\ "
#~ "\\(featureNames\\)"
#~ msgstr ""

#~ msgid "This method suppresses the given features."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`writeAcisFile "
#~ "<abaqus.Part.PartBase.PartBase.writeAcisFile>`\\ "
#~ "\\(fileName\\[\\, version\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method exports the geometry of "
#~ "the part to a named file in "
#~ "ACIS format."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`writeCADParameters "
#~ "<abaqus.Part.PartBase.PartBase.writeCADParameters>`\\ "
#~ "\\(paramFile\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method writes the parameters that"
#~ " were imported from the CAD system"
#~ " to a parameter file."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`writeIgesFile "
#~ "<abaqus.Part.PartBase.PartBase.writeIgesFile>`\\ \\(fileName\\,"
#~ " flavor\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method exports the geometry of "
#~ "the part to a named file in "
#~ "IGES format."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`writeStepFile "
#~ "<abaqus.Part.PartBase.PartBase.writeStepFile>`\\ \\(fileName\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method exports the geometry of "
#~ "the part to a named file in "
#~ "STEP format."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`writeVdaFile "
#~ "<abaqus.Part.PartBase.PartBase.writeVdaFile>`\\ \\(fileName\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method exports the geometry of "
#~ "the part to a named file in "
#~ "VDA-FS format."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`copyMeshPattern "
#~ "<abaqus.Part.PartBase.PartBase.copyMeshPattern>`\\ "
#~ "\\(elements\\, faces\\, elemFaces\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method copies a mesh pattern "
#~ "from a source region consisting of "
#~ "a set of shell elements or element"
#~ " faces onto a target face, mapping"
#~ " nodes and elements in a one-"
#~ "one correspondence between source and "
#~ "target."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`smoothNodes "
#~ "<abaqus.Part.PartBase.PartBase.smoothNodes>`\\ \\(nodes\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method smooths the given nodes "
#~ "of a native mesh, moving them "
#~ "locally to a more optimal location "
#~ "that improves the quality of the "
#~ "mesh."
#~ msgstr ""

#~ msgid ":py:obj:`Lock <abaqus.Part.PartBase.PartBase.Lock>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method locks the part."
#~ msgstr ""

#~ msgid ":py:obj:`Unlock <abaqus.Part.PartBase.PartBase.Unlock>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method unlocks the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`LockForUpgrade "
#~ "<abaqus.Part.PartBase.PartBase.LockForUpgrade>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method locks the part for upgrade."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`AutoRepair "
#~ "<abaqus.Part.PartFeature.PartFeature.AutoRepair>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method carries out a sequence "
#~ "of geometry repair operations if it "
#~ "contains invalid entities."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`AddCells "
#~ "<abaqus.Part.PartFeature.PartFeature.AddCells>`\\ "
#~ "\\(faceList\\[\\, flipped\\]\\)"
#~ msgstr ""

#~ msgid "This method tries to convert a shell entity to a solid entity."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`AnalyticRigidSurf2DPlanar "
#~ "<abaqus.Part.PartFeature.PartFeature.AnalyticRigidSurf2DPlanar>`\\ "
#~ "\\(sketch\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a first Feature "
#~ "object for an analytical rigid surface"
#~ " by creating a planar wire from "
#~ "the given ConstrainedSketch object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`AnalyticRigidSurfExtrude "
#~ "<abaqus.Part.PartFeature.PartFeature.AnalyticRigidSurfExtrude>`\\ "
#~ "\\(sketch\\[\\, depth\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a first Feature "
#~ "object for an analytical rigid surface"
#~ " by extruding the given ConstrainedSketch"
#~ " object by the given depth, creating"
#~ " a surface."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`AnalyticRigidSurfRevolve "
#~ "<abaqus.Part.PartFeature.PartFeature.AnalyticRigidSurfRevolve>`\\ "
#~ "\\(sketch\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a first Feature "
#~ "object for an analytical rigid surface"
#~ " by revolving the given ConstrainedSketch"
#~ " object by 360° about the **Y** "
#~ "axis."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`AssignMidsurfaceRegion "
#~ "<abaqus.Part.PartFeature.PartFeature.AssignMidsurfaceRegion>`\\ "
#~ "\\(cellList\\)"
#~ msgstr ""

#~ msgid "This method assign a mid-surface property to sequence of Cell objects."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`BaseSolidExtrude "
#~ "<abaqus.Part.PartFeature.PartFeature.BaseSolidExtrude>`\\ "
#~ "\\(sketch\\, depth\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a first Feature "
#~ "object by extruding the given "
#~ "ConstrainedSketch object by the given "
#~ "depth, creating a solid."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`BaseSolidRevolve "
#~ "<abaqus.Part.PartFeature.PartFeature.BaseSolidRevolve>`\\ "
#~ "\\(sketch\\, angle\\[\\, pitch\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a first Feature "
#~ "object by revolving the given "
#~ "ConstrainedSketch object by the given "
#~ "angle, creating a solid."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`BaseSolidSweep "
#~ "<abaqus.Part.PartFeature.PartFeature.BaseSolidSweep>`\\ "
#~ "\\(sketch\\, path\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a first Feature "
#~ "object by sweeping the given profile "
#~ "ConstrainedSketch object along the path "
#~ "defined by the path ConstrainedSketch "
#~ "object, creating a solid."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`BaseShell "
#~ "<abaqus.Part.PartFeature.PartFeature.BaseShell>`\\ \\(sketch\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a first Feature "
#~ "object by creating a planar shell "
#~ "from the given ConstrainedSketch object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`BaseShellExtrude "
#~ "<abaqus.Part.PartFeature.PartFeature.BaseShellExtrude>`\\ "
#~ "\\(sketch\\, depth\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a first Feature "
#~ "object by extruding the given "
#~ "ConstrainedSketch object by the given "
#~ "depth, creating a shell."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`BaseShellRevolve "
#~ "<abaqus.Part.PartFeature.PartFeature.BaseShellRevolve>`\\ "
#~ "\\(sketch\\, angle\\[\\, pitch\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a first Feature "
#~ "object by revolving the given "
#~ "ConstrainedSketch object by the given "
#~ "angle, creating a shell."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`BaseShellSweep "
#~ "<abaqus.Part.PartFeature.PartFeature.BaseShellSweep>`\\ "
#~ "\\(sketch\\, path\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a first Feature "
#~ "object by sweeping the given section "
#~ "ConstrainedSketch object along the path "
#~ "defined by the path ConstrainedSketch "
#~ "object, creating a shell."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`BaseWire "
#~ "<abaqus.Part.PartFeature.PartFeature.BaseWire>`\\ \\(sketch\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a first Feature "
#~ "object by creating a planar wire "
#~ "from the given ConstrainedSketch object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`BlendFaces "
#~ "<abaqus.Part.PartFeature.PartFeature.BlendFaces>`\\ \\(side1\\,"
#~ " side2\\[\\, method\\, path\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "by creating new faces that blends "
#~ "two sets of faces."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Chamfer "
#~ "<abaqus.Part.PartFeature.PartFeature.Chamfer>`\\ \\(length\\,"
#~ " edgeList\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by chamfering the given"
#~ " list of edges with a given "
#~ "length."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Mirror <abaqus.Part.PartFeature.PartFeature.Mirror>`\\"
#~ " \\(mirrorPlane\\, keepOriginal\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method mirrors existing part "
#~ "geometry across a plane to create "
#~ "new geometry."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`ConvertToAnalytical "
#~ "<abaqus.Part.PartFeature.PartFeature.ConvertToAnalytical>`\\ "
#~ "\\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method attempts to change entities"
#~ " into a simpler form that will "
#~ "speed up processing and make entities"
#~ " available during feature operations."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`ConvertToPrecise "
#~ "<abaqus.Part.PartFeature.PartFeature.ConvertToPrecise>`\\ "
#~ "\\(\\[method\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method attempts to change imprecise"
#~ " entities so that the geometry "
#~ "becomes precise."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`CoverEdges "
#~ "<abaqus.Part.PartFeature.PartFeature.CoverEdges>`\\ "
#~ "\\(edgeList\\[\\, tryAnalytical\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method generates a face using "
#~ "the given edges as the face's "
#~ "boundaries."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Cut <abaqus.Part.PartFeature.PartFeature.Cut>`\\ "
#~ "\\(sketchPlane\\, sketchPlaneSide\\, ...\\[\\, "
#~ "...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by cutting a hole "
#~ "using the given ConstrainedSketch object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`CutExtrude "
#~ "<abaqus.Part.PartFeature.PartFeature.CutExtrude>`\\ "
#~ "\\(sketchPlane\\, sketchPlaneSide\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by extruding the given"
#~ " ConstrainedSketch object by the given "
#~ "depth and cutting away material in "
#~ "the solid and shell regions of the"
#~ " part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`CutLoft "
#~ "<abaqus.Part.PartFeature.PartFeature.CutLoft>`\\ "
#~ "\\(loftsections\\[\\, startCondition\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by lofting between the"
#~ " given sections and cutting away "
#~ "material from the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`CutRevolve "
#~ "<abaqus.Part.PartFeature.PartFeature.CutRevolve>`\\ "
#~ "\\(sketchPlane\\, sketchPlaneSide\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by revolving the given"
#~ " ConstrainedSketch object by the given "
#~ "angle and cutting away material from "
#~ "the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`CutSweep "
#~ "<abaqus.Part.PartFeature.PartFeature.CutSweep>`\\ \\(path\\, "
#~ "profile\\[\\, pathPlane\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by sweeping the given "
#~ "ConstrainedSketch object along a path "
#~ "which may be a ConstrainedSketch or "
#~ "a sequence of Edge objects and "
#~ "cutting away material from the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`ExtendFaces "
#~ "<abaqus.Part.PartFeature.PartFeature.ExtendFaces>`\\ "
#~ "\\(\\[faces\\, extendAlong\\, distance\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method extends faces along its "
#~ "free edges by offsetting the external"
#~ " edges along the surfaces."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`FaceFromElementFaces "
#~ "<abaqus.Part.PartFeature.PartFeature.FaceFromElementFaces>`\\ "
#~ "\\(elementFaces\\[\\, stitch\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a geometry face "
#~ "from a collection of orphan element "
#~ "faces."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`HoleBlindFromEdges "
#~ "<abaqus.Part.PartFeature.PartFeature.HoleBlindFromEdges>`\\ "
#~ "\\(plane\\, planeSide\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by creating a circular"
#~ " blind hole of the given diameter "
#~ "and depth and cutting away material "
#~ "in the solid and shell regions of"
#~ " the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`HoleFromEdges "
#~ "<abaqus.Part.PartFeature.PartFeature.HoleFromEdges>`\\ "
#~ "\\(diameter\\, edge1\\, distance1\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by creating a circular"
#~ " hole of the given diameter in "
#~ "a 2D planar part and cutting away"
#~ " material in the shell and wire "
#~ "regions of the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`HoleThruAllFromEdges "
#~ "<abaqus.Part.PartFeature.PartFeature.HoleThruAllFromEdges>`\\ "
#~ "\\(plane\\, planeSide\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by creating a circular"
#~ " through hole of the given diameter"
#~ " and cutting away material in the "
#~ "solid and shell regions of the "
#~ "part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`MergeEdges "
#~ "<abaqus.Part.PartFeature.PartFeature.MergeEdges>`\\ "
#~ "\\(\\[edgeList\\, extendSelection\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method merges edges either by "
#~ "extending the user selection or using"
#~ " only the selected edges."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`OffsetFaces "
#~ "<abaqus.Part.PartFeature.PartFeature.OffsetFaces>`\\ "
#~ "\\(faceList\\[\\, distance\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "This method creates new faces by offsetting existing faces."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`RemoveCells "
#~ "<abaqus.Part.PartFeature.PartFeature.RemoveCells>`\\ "
#~ "\\(cellList\\)"
#~ msgstr ""

#~ msgid "This method converts a solid entity to a shell entity."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`RemoveFaces "
#~ "<abaqus.Part.PartFeature.PartFeature.RemoveFaces>`\\ "
#~ "\\(faceList\\[\\, deleteCells\\]\\)"
#~ msgstr ""

#~ msgid "This method removes faces from a solid entity or from a shell entity."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`RemoveFacesAndStitch "
#~ "<abaqus.Part.PartFeature.PartFeature.RemoveFacesAndStitch>`\\ "
#~ "\\(faceList\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method removes faces from a "
#~ "solid entity and attempts to close "
#~ "the resulting gap by extending the "
#~ "neighboring faces of the solid."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`RemoveRedundantEntities "
#~ "<abaqus.Part.PartFeature.PartFeature.RemoveRedundantEntities>`\\ "
#~ "\\(\\[vertexList\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method removes redundant edges and"
#~ " vertices from a solid or a "
#~ "shell entity."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`RepairFaceNormals "
#~ "<abaqus.Part.PartFeature.PartFeature.RepairFaceNormals>`\\ "
#~ "\\(\\[faceList\\]\\)"
#~ msgstr ""

#~ msgid "This method works on the entire part or a sequence of shell faces."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`RepairInvalidEdges "
#~ "<abaqus.Part.PartFeature.PartFeature.RepairInvalidEdges>`\\ "
#~ "\\(edgeList\\)"
#~ msgstr ""

#~ msgid "This method repairs invalid edges."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`RepairSliver "
#~ "<abaqus.Part.PartFeature.PartFeature.RepairSliver>`\\ \\(face\\,"
#~ " point1\\, point2\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "This method repairs the selected sliver from the selected face."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`RepairSmallEdges "
#~ "<abaqus.Part.PartFeature.PartFeature.RepairSmallEdges>`\\ "
#~ "\\(edgeList\\[\\, toleranceChecks\\]\\)"
#~ msgstr ""

#~ msgid "This method repairs small edges."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`RepairSmallFaces "
#~ "<abaqus.Part.PartFeature.PartFeature.RepairSmallFaces>`\\ "
#~ "\\(faceList\\[\\, toleranceChecks\\]\\)"
#~ msgstr ""

#~ msgid "This method repairs small faces."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`ReplaceFaces "
#~ "<abaqus.Part.PartFeature.PartFeature.ReplaceFaces>`\\ "
#~ "\\(faceList\\[\\, stitch\\]\\)"
#~ msgstr ""

#~ msgid "This method replaces the selected faces with a single face."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Round <abaqus.Part.PartFeature.PartFeature.Round>`\\"
#~ " \\(radius\\, edgeList\\, vertexList\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by rounding (filleting) "
#~ "the given list of entities with "
#~ "the given radius."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Shell <abaqus.Part.PartFeature.PartFeature.Shell>`\\"
#~ " \\(sketchPlane\\, sketchPlaneSide\\, ...\\[\\, "
#~ "...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by creating a planar "
#~ "shell from the given ConstrainedSketch "
#~ "object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`ShellExtrude "
#~ "<abaqus.Part.PartFeature.PartFeature.ShellExtrude>`\\ "
#~ "\\(sketchPlane\\, sketchPlaneSide\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by extruding the given"
#~ " ConstrainedSketch object by the given "
#~ "depth, creating a shell protrusion."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`ShellLoft "
#~ "<abaqus.Part.PartFeature.PartFeature.ShellLoft>`\\ "
#~ "\\(loftsections\\[\\, startCondition\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by lofting between the"
#~ " given sections and adding shell "
#~ "faces to the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`ShellRevolve "
#~ "<abaqus.Part.PartFeature.PartFeature.ShellRevolve>`\\ "
#~ "\\(sketchPlane\\, sketchPlaneSide\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by revolving the given"
#~ " ConstrainedSketch object by the given "
#~ "angle, creating a shell protrusion."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`ShellSweep "
#~ "<abaqus.Part.PartFeature.PartFeature.ShellSweep>`\\ \\(path\\,"
#~ " profile\\[\\, pathPlane\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by sweeping the given "
#~ "ConstrainedSketch object or a sequence "
#~ "of Edge objects along a path which"
#~ " may be a ConstrainedSketch or a "
#~ "sequence of Edge objects, creating a "
#~ "shell swept protrusion."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`SolidExtrude "
#~ "<abaqus.Part.PartFeature.PartFeature.SolidExtrude>`\\ "
#~ "\\(sketchPlane\\, sketchPlaneSide\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by extruding the given"
#~ " ConstrainedSketch object by the given "
#~ "depth, creating a solid protrusion."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`SolidLoft "
#~ "<abaqus.Part.PartFeature.PartFeature.SolidLoft>`\\ "
#~ "\\(loftsections\\[\\, startCondition\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by lofting between the"
#~ " given sections and adding material "
#~ "to the part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`SolidRevolve "
#~ "<abaqus.Part.PartFeature.PartFeature.SolidRevolve>`\\ "
#~ "\\(sketchPlane\\, sketchPlaneSide\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by revolving the given"
#~ " ConstrainedSketch object by the given "
#~ "angle, creating a solid protrusion."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`SolidSweep "
#~ "<abaqus.Part.PartFeature.PartFeature.SolidSweep>`\\ \\(path\\,"
#~ " profile\\[\\, pathPlane\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by sweeping the given "
#~ "ConstrainedSketch object or a Face "
#~ "object along a path which may be"
#~ " a ConstrainedSketch or a sequence of"
#~ " Edge objects, creating a solid swept"
#~ " protrusion."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Stitch <abaqus.Part.PartFeature.PartFeature.Stitch>`\\"
#~ " \\(\\[edgeList\\, stitchTolerance\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method attempts to create a "
#~ "valid part by binding together free "
#~ "and imprecise edges of all the "
#~ "faces of a part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Wire <abaqus.Part.PartFeature.PartFeature.Wire>`\\ "
#~ "\\(sketchPlane\\, sketchPlaneSide\\, ...\\[\\, "
#~ "...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by creating a planar "
#~ "wire from the given ConstrainedSketch "
#~ "object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`WireSpline "
#~ "<abaqus.Part.PartFeature.PartFeature.WireSpline>`\\ "
#~ "\\(points\\[\\, mergeType\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by creating a spline "
#~ "wire that passes through a sequence "
#~ "of given points."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`WirePolyLine "
#~ "<abaqus.Part.PartFeature.PartFeature.WirePolyLine>`\\ "
#~ "\\(points\\[\\, mergeType\\, meshable\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by creating a polyline"
#~ " wire that passes through a sequence"
#~ " of given points."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`WireFromEdge "
#~ "<abaqus.Part.PartFeature.PartFeature.WireFromEdge>`\\ "
#~ "\\(edgeList\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by creating a Wire "
#~ "by selecting one or more Edge "
#~ "objects of a Solid or Shell part."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`AttachmentPoints "
#~ "<abaqus.Feature.Feature.Feature.AttachmentPoints>`\\ \\(name\\,"
#~ " points\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "This method creates an attachment points Feature."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`AttachmentPointsAlongDirection "
#~ "<abaqus.Feature.Feature.Feature.AttachmentPointsAlongDirection>`\\ "
#~ "\\(name\\, ...\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "by creating attachment points along a"
#~ " direction or between two points."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`AttachmentPointsOffsetFromEdges "
#~ "<abaqus.Feature.Feature.Feature.AttachmentPointsOffsetFromEdges>`\\"
#~ " \\(name\\, edges\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "by creating attachment points along or"
#~ " offset from one or more connected"
#~ " edges."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumAxisByCylFace "
#~ "<abaqus.Feature.Feature.Feature.DatumAxisByCylFace>`\\ "
#~ "\\(face\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumAxis object along the "
#~ "axis of a cylinder or cone."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumAxisByNormalToPlane "
#~ "<abaqus.Feature.Feature.Feature.DatumAxisByNormalToPlane>`\\ "
#~ "\\(plane\\, point\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumAxis object normal to "
#~ "the specified plane and passing through"
#~ " the specified point."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumAxisByParToEdge "
#~ "<abaqus.Feature.Feature.Feature.DatumAxisByParToEdge>`\\ "
#~ "\\(edge\\, point\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumAxis object parallel to "
#~ "the specified edge and passing through"
#~ " the specified point."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumAxisByPrincipalAxis "
#~ "<abaqus.Feature.Feature.Feature.DatumAxisByPrincipalAxis>`\\ "
#~ "\\(principalAxis\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumAxis object along one "
#~ "of the three principal axes."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumAxisByRotation "
#~ "<abaqus.Feature.Feature.Feature.DatumAxisByRotation>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumAxisByThreePoint "
#~ "<abaqus.Feature.Feature.Feature.DatumAxisByThreePoint>`\\ "
#~ "\\(point1\\, point2\\, point3\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumAxis object normal to "
#~ "the circle described by three points "
#~ "and through its center."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumAxisByThruEdge "
#~ "<abaqus.Feature.Feature.Feature.DatumAxisByThruEdge>`\\ "
#~ "\\(edge\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumAxis object along the "
#~ "specified edge."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumAxisByTwoPlane "
#~ "<abaqus.Feature.Feature.Feature.DatumAxisByTwoPlane>`\\ "
#~ "\\(plane1\\, plane2\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumAxis object at the "
#~ "intersection of two planes."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumAxisByTwoPoint "
#~ "<abaqus.Feature.Feature.Feature.DatumAxisByTwoPoint>`\\ "
#~ "\\(point1\\, point2\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumAxis object along the "
#~ "line joining two points."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumCsysByDefault "
#~ "<abaqus.Feature.Feature.Feature.DatumCsysByDefault>`\\ "
#~ "\\(coordSysType\\[\\, name\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumCsys object from the "
#~ "specified default coordinate system at "
#~ "the origin."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumCsysByOffset "
#~ "<abaqus.Feature.Feature.Feature.DatumCsysByOffset>`\\ "
#~ "\\(coordSysType\\, ...\\[\\, name\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumCsys object by offsetting "
#~ "the origin of an existing datum "
#~ "coordinate system to a specified point."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumCsysByThreePoints "
#~ "<abaqus.Feature.Feature.Feature.DatumCsysByThreePoints>`\\ "
#~ "\\(coordSysType\\, origin\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumCsys object from three "
#~ "points."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumCsysByTwoLines "
#~ "<abaqus.Feature.Feature.Feature.DatumCsysByTwoLines>`\\ "
#~ "\\(coordSysType\\, line1\\, line2\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumCsys object from two "
#~ "orthogonal lines."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPlaneByPrincipalPlane "
#~ "<abaqus.Feature.Feature.Feature.DatumPlaneByPrincipalPlane>`\\ "
#~ "\\(principalPlane\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumPlane object through the "
#~ "origin along one of the three "
#~ "principal planes."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPlaneByOffset "
#~ "<abaqus.Feature.Feature.Feature.DatumPlaneByOffset>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPlaneByRotation "
#~ "<abaqus.Feature.Feature.Feature.DatumPlaneByRotation>`\\ "
#~ "\\(plane\\, axis\\, angle\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumPlane object by rotating "
#~ "a plane about the specified axis "
#~ "through the specified angle."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPlaneByThreePoints "
#~ "<abaqus.Feature.Feature.Feature.DatumPlaneByThreePoints>`\\ "
#~ "\\(point1\\, point2\\, point3\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumPlane object defined by "
#~ "passing through three points."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPlaneByLinePoint "
#~ "<abaqus.Feature.Feature.Feature.DatumPlaneByLinePoint>`\\ "
#~ "\\(line\\, point\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumPlane object that pass "
#~ "through the specified line and through"
#~ " the specified point that does not"
#~ " lie on the line."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPlaneByPointNormal "
#~ "<abaqus.Feature.Feature.Feature.DatumPlaneByPointNormal>`\\ "
#~ "\\(point\\, normal\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumPlane object normal to "
#~ "the specified line and running through"
#~ " the specified point."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPlaneByTwoPoint "
#~ "<abaqus.Feature.Feature.Feature.DatumPlaneByTwoPoint>`\\ "
#~ "\\(point1\\, point2\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumPlane object midway between"
#~ " two points and normal to the "
#~ "line connecting the points."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPointByCoordinate "
#~ "<abaqus.Feature.Feature.Feature.DatumPointByCoordinate>`\\ "
#~ "\\(coords\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumPoint object at the "
#~ "point defined by the specified "
#~ "coordinates."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPointByOffset "
#~ "<abaqus.Feature.Feature.Feature.DatumPointByOffset>`\\ "
#~ "\\(point\\, vector\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumPoint object offset from "
#~ "an existing point by a vector."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPointByMidPoint "
#~ "<abaqus.Feature.Feature.Feature.DatumPointByMidPoint>`\\ "
#~ "\\(point1\\, point2\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumPoint object midway between"
#~ " two points."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPointByOnFace "
#~ "<abaqus.Feature.Feature.Feature.DatumPointByOnFace>`\\ "
#~ "\\(face\\, edge1\\, offset1\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumPoint object on the "
#~ "specified face, offset from two edges."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPointByEdgeParam "
#~ "<abaqus.Feature.Feature.Feature.DatumPointByEdgeParam>`\\ "
#~ "\\(edge\\, parameter\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumPoint object along an "
#~ "edge at a selected distance from "
#~ "one end of the edge."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPointByProjOnEdge "
#~ "<abaqus.Feature.Feature.Feature.DatumPointByProjOnEdge>`\\ "
#~ "\\(point\\, edge\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumPoint object along an "
#~ "edge by projecting an existing point "
#~ "along the normal to the edge."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`DatumPointByProjOnFace "
#~ "<abaqus.Feature.Feature.Feature.DatumPointByProjOnFace>`\\ "
#~ "\\(point\\, face\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a DatumPoint object on a "
#~ "specified face by projecting an existing"
#~ " point onto the face."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`MakeSketchTransform "
#~ "<abaqus.Feature.Feature.Feature.MakeSketchTransform>`\\ "
#~ "\\(sketchPlane\\[\\, origin\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "This method creates a Transform object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionCellByDatumPlane "
#~ "<abaqus.Feature.Feature.Feature.PartitionCellByDatumPlane>`\\ "
#~ "\\(cells\\, datumPlane\\)"
#~ msgstr ""

#~ msgid "This method partitions one or more cells using the given datum plane."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionCellByExtendFace "
#~ "<abaqus.Feature.Feature.Feature.PartitionCellByExtendFace>`\\ "
#~ "\\(cells\\, extendFace\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "cells by extending the underlying "
#~ "geometry of a given face to "
#~ "partition the target cells."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionCellByExtrudeEdge "
#~ "<abaqus.Feature.Feature.Feature.PartitionCellByExtrudeEdge>`\\ "
#~ "\\(cells\\, edges\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "cells by extruding selected edges in "
#~ "the given direction."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionCellByPatchNCorners "
#~ "<abaqus.Feature.Feature.Feature.PartitionCellByPatchNCorners>`\\ "
#~ "\\(cell\\, cornerPoints\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions a cell using "
#~ "an N-sided cutting patch defined by "
#~ "the given corner points."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionCellByPatchNEdges "
#~ "<abaqus.Feature.Feature.Feature.PartitionCellByPatchNEdges>`\\ "
#~ "\\(cell\\, edges\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions a cell using "
#~ "an N-sided cutting patch defined by "
#~ "the given edges."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionCellByPlaneNormalToEdge "
#~ "<abaqus.Feature.Feature.Feature.PartitionCellByPlaneNormalToEdge>`\\"
#~ " \\(cells\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "cells using a plane normal to an"
#~ " edge at the given edge point."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionCellByPlanePointNormal "
#~ "<abaqus.Feature.Feature.Feature.PartitionCellByPlanePointNormal>`\\"
#~ " \\(cells\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "cells using a plane defined by a"
#~ " point and a normal direction."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionCellByPlaneThreePoints "
#~ "<abaqus.Feature.Feature.Feature.PartitionCellByPlaneThreePoints>`\\"
#~ " \\(cells\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "cells using a plane defined by "
#~ "three points."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionCellBySweepEdge "
#~ "<abaqus.Feature.Feature.Feature.PartitionCellBySweepEdge>`\\ "
#~ "\\(cells\\, edges\\, sweepPath\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "cells by sweeping selected edges along"
#~ " the given sweep path."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionEdgeByDatumPlane "
#~ "<abaqus.Feature.Feature.Feature.PartitionEdgeByDatumPlane>`\\ "
#~ "\\(edges\\, datumPlane\\)"
#~ msgstr ""

#~ msgid "This method partitions an edge where it intersects with a datum plane."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionEdgeByParam "
#~ "<abaqus.Feature.Feature.Feature.PartitionEdgeByParam>`\\ "
#~ "\\(edges\\, parameter\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "edges at the given normalized edge "
#~ "parameter."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionEdgeByPoint "
#~ "<abaqus.Feature.Feature.Feature.PartitionEdgeByPoint>`\\ "
#~ "\\(edge\\, point\\)"
#~ msgstr ""

#~ msgid "This method partitions an edge at the given point."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionFaceByAuto "
#~ "<abaqus.Feature.Feature.Feature.PartitionFaceByAuto>`\\ "
#~ "\\(face\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method automatically partitions a "
#~ "target face into simple regions that "
#~ "can be meshed using a structured "
#~ "meshing technique."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionFaceByCurvedPathEdgeParams "
#~ "<abaqus.Feature.Feature.Feature.PartitionFaceByCurvedPathEdgeParams>`\\"
#~ " \\(face\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions a face normal "
#~ "to two edges, using a curved path"
#~ " between the two given edge points"
#~ " defined by the normalized edge "
#~ "parameters."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionFaceByCurvedPathEdgePoints "
#~ "<abaqus.Feature.Feature.Feature.PartitionFaceByCurvedPathEdgePoints>`\\"
#~ " \\(face\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions a face normal "
#~ "to two edges, using a curved path"
#~ " between the two given edge points."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionFaceByDatumPlane "
#~ "<abaqus.Feature.Feature.Feature.PartitionFaceByDatumPlane>`\\ "
#~ "\\(faces\\, datumPlane\\)"
#~ msgstr ""

#~ msgid "This method partitions one or more faces using the given datum plane."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionFaceByExtendFace "
#~ "<abaqus.Feature.Feature.Feature.PartitionFaceByExtendFace>`\\ "
#~ "\\(faces\\, extendFace\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "faces by extending the underlying "
#~ "geometry of another given face to "
#~ "partition the target faces."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionFaceByIntersectFace "
#~ "<abaqus.Feature.Feature.Feature.PartitionFaceByIntersectFace>`\\ "
#~ "\\(faces\\, cuttingFaces\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "faces using the given cutting faces "
#~ "to partition the target faces."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionFaceByProjectingEdges "
#~ "<abaqus.Feature.Feature.Feature.PartitionFaceByProjectingEdges>`\\ "
#~ "\\(faces\\, edges\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "faces by projecting the given edges "
#~ "on the target faces."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionFaceByShortestPath "
#~ "<abaqus.Feature.Feature.Feature.PartitionFaceByShortestPath>`\\ "
#~ "\\(faces\\, point1\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "faces using a minimum distance path "
#~ "between the two given points."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionFaceBySketch "
#~ "<abaqus.Feature.Feature.Feature.PartitionFaceBySketch>`\\ "
#~ "\\(faces\\, sketch\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "This method partitions one or more planar faces by sketching on them."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionFaceBySketchDistance "
#~ "<abaqus.Feature.Feature.Feature.PartitionFaceBySketchDistance>`\\ "
#~ "\\(faces\\, ...\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "faces by sketching on a sketch "
#~ "plane and then projecting the sketch "
#~ "toward the target faces through the "
#~ "given distance."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionFaceBySketchRefPoint "
#~ "<abaqus.Feature.Feature.Feature.PartitionFaceBySketchRefPoint>`\\ "
#~ "\\(faces\\, ...\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "faces by sketching on a sketch "
#~ "plane and then projecting the sketch "
#~ "toward the target faces through a "
#~ "distance governed by the reference "
#~ "point."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`PartitionFaceBySketchThruAll "
#~ "<abaqus.Feature.Feature.Feature.PartitionFaceBySketchThruAll>`\\ "
#~ "\\(faces\\, ...\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method partitions one or more "
#~ "faces by sketching on a sketch "
#~ "plane and then projecting toward the "
#~ "target faces through an infinite "
#~ "distance."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`ReferencePoint "
#~ "<abaqus.Feature.Feature.Feature.ReferencePoint>`\\ "
#~ "\\(point\\[\\, instanceName\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "and a ReferencePoint object at the "
#~ "specified location."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`RemoveWireEdges "
#~ "<abaqus.Feature.Feature.Feature.RemoveWireEdges>`\\ "
#~ "\\(wireEdgeList\\)"
#~ msgstr ""

#~ msgid "This method removes wire edges."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`WirePolyLine "
#~ "<abaqus.Feature.Feature.Feature.WirePolyLine>`\\ \\(points\\[\\,"
#~ " mergeType\\, meshable\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates an additional "
#~ "Feature object by creating a series "
#~ "of wires joining points in pairs."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`isSuppressed "
#~ "<abaqus.Feature.Feature.Feature.isSuppressed>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method queries the suppressed state of the feature."
#~ msgstr ""

#~ msgid ":py:obj:`restore <abaqus.Feature.Feature.Feature.restore>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method restores the parameters of"
#~ " a feature to the value they "
#~ "had when the backup method was "
#~ "invoked on the part or assembly."
#~ msgstr ""

#~ msgid ":py:obj:`resume <abaqus.Feature.Feature.Feature.resume>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method resumes suppressed features."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`setValues <abaqus.Feature.Feature.Feature.setValues>`\\"
#~ " \\(\\[parameter\\, parameter1\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "This method modifies the Feature object."
#~ msgstr ""

#~ msgid ":py:obj:`suppress <abaqus.Feature.Feature.Feature.suppress>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method suppresses features."
#~ msgstr ""

#~ msgid "Member Details:"
#~ msgstr ""

#~ msgid ""
#~ "This method modifies underlying entities "
#~ "of the selected skin. At least one"
#~ " of the optional arguments needs to"
#~ " be specified."
#~ msgstr ""

#~ msgid "This function can be accessed by::"
#~ msgstr ""

#~ msgid ""
#~ "Check `EditSkin on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-editskinregpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid ""
#~ "A String specifying the repository key."
#~ " The default value is an empty "
#~ "string."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Face objects specifying"
#~ " the faces on which skins should "
#~ "be created. Applicable to three and "
#~ "two-dimensional parts."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Edge objects specifying"
#~ " the edges on which skins should "
#~ "be created. Applicable to axisymmetric "
#~ "parts."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshFace objects "
#~ "specifying the mesh faces on which "
#~ "skins should be created. Applicable to"
#~ " three and two-dimensional parts."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshEdge objects "
#~ "specifying the mesh edges on which "
#~ "skins should be created. Applicable to"
#~ " axisymmetric parts."
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "**skin** -- A Skin object"
#~ msgstr ""

#~ msgid "Return type"
#~ msgstr ""

#~ msgid ":class:`Skin`"
#~ msgstr ""

#~ msgid ""
#~ "Check `MapSetsFromOdb on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-mapsetsfromodbregpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid "A String specifying the path to the ODB containing the source sets."
#~ msgstr ""

#~ msgid "A list of names of sets on the ODB to map."
#~ msgstr ""

#~ msgid ""
#~ "A list of names of sets to "
#~ "construct or use corresponding to the"
#~ " ODB sets."
#~ msgstr ""

#~ msgid ""
#~ "An enum to specify OVERWRITE, APPEND,"
#~ " INTERSECT, or REMOVE. The default is"
#~ " OVERWRITE."
#~ msgstr ""

#~ msgid "A Set object or a tuple of Set objects."
#~ msgstr ""

#~ msgid ":class:`Set`"
#~ msgstr ""

#~ msgid "A sequence of Set objects."
#~ msgstr ""

#~ msgid ""
#~ "A SymbolicConstant specifying the boolean "
#~ "operation to perform. Possible values "
#~ "are UNION, INTERSECTION, and DIFFERENCE. "
#~ "The default value is UNION. Note "
#~ "that if DIFFERENCE is specified, the "
#~ "order of the given input sets is"
#~ " important; All sets specified after "
#~ "the first one are subtracted from "
#~ "the first one."
#~ msgstr ""

#~ msgid "A Set object."
#~ msgstr ""

#~ msgid ""
#~ "This method creates a set containing "
#~ "faces of the part marked with a"
#~ " specified color attribute. Third-party "
#~ "applications can assign color attributes "
#~ "to faces, and the color attribute "
#~ "can be imported into Abaqus from "
#~ "an ACIS file. You can use this "
#~ "method to create sets only on "
#~ "parts; however, you can access the "
#~ "sets from instances of the parts "
#~ "in the assembly."
#~ msgstr ""

#~ msgid ""
#~ "Check `SetFromColor on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-setfromcolorregpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of three Ints specifying "
#~ "the RGB color. Values can range "
#~ "from 0 to 255. The first integer"
#~ " is for red, the second for "
#~ "green, and the third for blue. For"
#~ " example, a face colored in yellow"
#~ " is identified by:`color=(255,255,0)`"
#~ msgstr ""

#~ msgid ""
#~ "Check `SetFromElementLabels on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-setfromelementlabelsregpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of element labels. An "
#~ "element label is a sequence of Int"
#~ " element identifiers. For example, for "
#~ "a part::      elementLabels=(2,3,5,7)  For an"
#~ " assembly::      elementLabels=(('Instance-1', "
#~ "(2,3,5,7)), ('Instance-2', (1,2,3)))`"
#~ msgstr ""

#~ msgid ""
#~ "A sequence of element labels. An "
#~ "element label is a sequence of Int"
#~ " element identifiers. For example, for "
#~ "a part::"
#~ msgstr ""

#~ msgid "For an assembly::"
#~ msgstr ""

#~ msgid ""
#~ "Check `SetFromNodeLabels on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-setfromnodelabelsregpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of node labels. A node"
#~ " label is a sequence of Int "
#~ "node identifiers. For example, for a "
#~ "part::      nodeLabels=(2,3,5,7)  For an "
#~ "assembly::      nodeLabels=(('Instance-1', (2,3,5,7)), "
#~ "('Instance-2', (1,2,3)))`"
#~ msgstr ""

#~ msgid ""
#~ "A sequence of node labels. A node"
#~ " label is a sequence of Int "
#~ "node identifiers. For example, for a "
#~ "part::"
#~ msgstr ""

#~ msgid ""
#~ "A Boolean specifying whether the created"
#~ " set is unsorted. The default value"
#~ " is False.  .. versionadded:: 2018     "
#~ "The ``unsorted`` argument was added."
#~ msgstr ""

#~ msgid ""
#~ "A Boolean specifying whether the created"
#~ " set is unsorted. The default value"
#~ " is False."
#~ msgstr ""

#~ msgid "The ``unsorted`` argument was added."
#~ msgstr ""

#~ msgid ""
#~ "This method creates a skin from a"
#~ " sequence of objects in a model "
#~ "database. At least one of the "
#~ "optional arguments needs to be "
#~ "specified."
#~ msgstr ""

#~ msgid ""
#~ "Check `Skin on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-skinregpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "This method creates a stringer from "
#~ "a sequence of objects in a model"
#~ " database. At least one of the "
#~ "optional arguments needs to be "
#~ "specified."
#~ msgstr ""

#~ msgid ""
#~ "Check `Stringer on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-stringerregpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Edge objects specifying"
#~ " the edges on which stringers should"
#~ " be created. Applicable to three and"
#~ " two-dimensional parts."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshEdge objects "
#~ "specifying the mesh edges on which "
#~ "stringers should be created. Applicable "
#~ "to three and two-dimensional parts."
#~ msgstr ""

#~ msgid "**stringer** -- A Stringer object"
#~ msgstr ""

#~ msgid ":class:`Stringer`"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a surface from "
#~ "a sequence of objects in a model"
#~ " database. The surface will apply to"
#~ " the sides specified by the "
#~ "arguments.For example::"
#~ msgstr ""

#~ msgid ""
#~ "Check `Surface on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-surfaceregpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshElement objects "
#~ "(surface applies to SIDE1 of element)."
#~ " The default value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshElement objects "
#~ "(surface applies to SIDE2 of element)."
#~ " The default value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshElement objects "
#~ "(surface applies to both SIDE1 and "
#~ "SIDE2 of element). The default value "
#~ "is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshElement objects "
#~ "(surface applies to END1 of element)."
#~ " The default value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshElement objects "
#~ "(surface applies to END2 of element)."
#~ " The default value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshElement objects "
#~ "(surface applies to circumference of "
#~ "element). The default value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshElement objects "
#~ "(surface applies to FACE1 of element)"
#~ " or MeshFace objects. The default "
#~ "value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshElement objects "
#~ "(surface applies to FACE2 of element)"
#~ " or MeshFace objects. The default "
#~ "value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshElement objects "
#~ "(surface applies to FACE3 of element)"
#~ " or MeshFace objects. The default "
#~ "value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshElement objects "
#~ "(surface applies to FACE4 of element)"
#~ " or MeshFace objects. The default "
#~ "value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshElement objects "
#~ "(surface applies to FACE5 of element)"
#~ " or MeshFace objects. The default "
#~ "value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshElement objects "
#~ "(surface applies to FACE6 of element)"
#~ " or MeshFace objects. The default "
#~ "value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Face objects (surface "
#~ "applies to SIDE1 of face). The "
#~ "default value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Face objects (surface "
#~ "applies to SIDE2 of face). The "
#~ "default value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Face objects (surface "
#~ "applies to both SIDE1 and SIDE2 of"
#~ " face). The default value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Edge objects (surface "
#~ "applies to SIDE1 of edge). The "
#~ "default value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Edge objects (surface "
#~ "applies to SIDE2 of edge). The "
#~ "default value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Edge objects (surface "
#~ "applies to END1 of edge). The "
#~ "default value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Edge objects (surface "
#~ "applies to END2 of edge). The "
#~ "default value is None."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Edge objects (surface "
#~ "applies circumferentially to edge). The "
#~ "default value is None."
#~ msgstr ""

#~ msgid ""
#~ "The required parameters for different "
#~ "conditions are:  - On three-dimensional"
#~ " solid faces, you can use the "
#~ "following arguments:   side1Faces, side2Faces  "
#~ "- On three-dimensional shell faces, "
#~ "you can use the following arguments:"
#~ "   side1Faces, side2Faces, side12Faces  - "
#~ "On three-dimensional wire edges, you "
#~ "can use the following arguments:   "
#~ "end1Edges, end2Edges, circumEdges  - On "
#~ "three-dimensional or two-dimensional or "
#~ "axisymmetric edges, you can use the "
#~ "following arguments:   side1Edges, side2Edges  "
#~ "- On two-dimensional or axisymmetric "
#~ "shell elements, you can use the "
#~ "following arguments:   face1Elements, face2Elements,"
#~ " face3Elements, face4Elements  - On solid"
#~ " elements, you can use the following"
#~ " arguments:   face1Elements, face2Elements, "
#~ "face3Elements, face4Elements, face5Elements, "
#~ "face6Elements  - On three-dimensional "
#~ "shell elements, you can use the "
#~ "following arguments:   side1Elements, side2Elements,"
#~ " side12Elements  - On three-dimensional "
#~ "wire elements, you can use the "
#~ "following arguments:   end1Elements, end2Elements,"
#~ " circumElements  - On two-dimensional "
#~ "or axisymmetric wire elements, you can"
#~ " use the following arguments:   "
#~ "side1Elements, side2Elements"
#~ msgstr ""

#~ msgid "The required parameters for different conditions are:"
#~ msgstr ""

#~ msgid ""
#~ "On three-dimensional solid faces, you"
#~ " can use the following arguments: "
#~ "side1Faces, side2Faces"
#~ msgstr ""

#~ msgid ""
#~ "On three-dimensional shell faces, you"
#~ " can use the following arguments: "
#~ "side1Faces, side2Faces, side12Faces"
#~ msgstr ""

#~ msgid ""
#~ "On three-dimensional wire edges, you "
#~ "can use the following arguments: "
#~ "end1Edges, end2Edges, circumEdges"
#~ msgstr ""

#~ msgid ""
#~ "On three-dimensional or two-dimensional"
#~ " or axisymmetric edges, you can use"
#~ " the following arguments: side1Edges, "
#~ "side2Edges"
#~ msgstr ""

#~ msgid ""
#~ "On two-dimensional or axisymmetric shell"
#~ " elements, you can use the following"
#~ " arguments: face1Elements, face2Elements, "
#~ "face3Elements, face4Elements"
#~ msgstr ""

#~ msgid ""
#~ "On solid elements, you can use the"
#~ " following arguments: face1Elements, "
#~ "face2Elements, face3Elements, face4Elements, "
#~ "face5Elements, face6Elements"
#~ msgstr ""

#~ msgid ""
#~ "On three-dimensional shell elements, you"
#~ " can use the following arguments: "
#~ "side1Elements, side2Elements, side12Elements"
#~ msgstr ""

#~ msgid ""
#~ "On three-dimensional wire elements, you"
#~ " can use the following arguments: "
#~ "end1Elements, end2Elements, circumElements"
#~ msgstr ""

#~ msgid ""
#~ "On two-dimensional or axisymmetric wire"
#~ " elements, you can use the following"
#~ " arguments: side1Elements, side2Elements"
#~ msgstr ""

#~ msgid "**surf** -- A Surface object"
#~ msgstr ""

#~ msgid ":class:`Surface`"
#~ msgstr ""

#~ msgid "Bases: :py:class:`~abaqus.Region.RegionAssemblyBase.RegionAssemblyBase`"
#~ msgstr ""

#~ msgid ""
#~ "An Assembly object is a container "
#~ "for instances of parts. The Assembly "
#~ "object has no constructor command. "
#~ "Abaqus creates the **rootAssembly** member "
#~ "when a Model object is created."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionAssembly on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-assemblyregpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`isOutOfDate "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.isOutOfDate>`\\"
#~ msgstr ""

#~ msgid ""
#~ "An Int specifying that feature "
#~ "parameters have been modified but that"
#~ " the assembly has not been "
#~ "regenerated."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`timeStamp "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.timeStamp>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A Float specifying which gives an "
#~ "indication when the assembly was last"
#~ " modified."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`isLocked "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.isLocked>`\\"
#~ msgstr ""

#~ msgid "An Int specifying whether the assembly is locked or not."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`regenerateConstraintsTogether "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.regenerateConstraintsTogether>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A Boolean specifying whether the "
#~ "positioning constraints in the assembly "
#~ "should be regenerated together before "
#~ "regenerating other assembly features."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`vertices "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.vertices>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A VertexArray object specifying all the"
#~ " vertices existing at the assembly "
#~ "level."
#~ msgstr ""

#~ msgid ":py:obj:`edges <abaqus.Assembly.AssemblyBase.AssemblyBase.edges>`\\"
#~ msgstr ""

#~ msgid ""
#~ "An EdgeArray object specifying all the"
#~ " edges existing at the assembly "
#~ "level."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`elements "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.elements>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A MeshElementArray object specifying all "
#~ "the elements existing at the assembly"
#~ " level."
#~ msgstr ""

#~ msgid ":py:obj:`nodes <abaqus.Assembly.AssemblyBase.AssemblyBase.nodes>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A MeshNodeArray object specifying all "
#~ "the nodes existing at the assembly "
#~ "level."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`instances "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.instances>`\\"
#~ msgstr ""

#~ msgid "A repository of PartInstance objects."
#~ msgstr ""

#~ msgid ":py:obj:`datums <abaqus.Assembly.AssemblyBase.AssemblyBase.datums>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of Datum objects specifying"
#~ " all Datum objects in the assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`features "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.features>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of Feature objects "
#~ "specifying all Feature objects in the"
#~ " assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`featuresById "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.featuresById>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of Feature objects "
#~ "specifying all Feature objects in the"
#~ " assembly.The Feature objects in the "
#~ "featuresById repository are the same as"
#~ " the Feature objects in the features"
#~ " repository."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`surfaces "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.surfaces>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of Surface objects "
#~ "specifying for more information, see "
#~ "[Region "
#~ "commands](https://help.3ds.com/2022/english/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-m"
#~ "-RegPyc-sb.htm?ContextScope=all)."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`allSurfaces "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.allSurfaces>`\\"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`allInternalSurfaces "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.allInternalSurfaces>`\\"
#~ msgstr ""

#~ msgid ":py:obj:`sets <abaqus.Assembly.AssemblyBase.AssemblyBase.sets>`\\"
#~ msgstr ""

#~ msgid "A repository of Set objects."
#~ msgstr ""

#~ msgid ":py:obj:`allSets <abaqus.Assembly.AssemblyBase.AssemblyBase.allSets>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of Set objects specifying"
#~ " for more information, see [Region "
#~ "commands](https://help.3ds.com/2022/english/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-m"
#~ "-RegPyc-sb.htm?ContextScope=all)."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`allInternalSets "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.allInternalSets>`\\"
#~ msgstr ""

#~ msgid ":py:obj:`skins <abaqus.Assembly.AssemblyBase.AssemblyBase.skins>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of Skin objects specifying"
#~ " the skins created on the assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`stringers "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.stringers>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A repository of Stringer objects "
#~ "specifying the stringers created on the"
#~ " assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`referencePoints "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.referencePoints>`\\"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`modelInstances "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.modelInstances>`\\"
#~ msgstr ""

#~ msgid "A repository of ModelInstance objects."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`allInstances "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.allInstances>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A PartInstance object specifying the "
#~ "PartInstances and A ModelInstance object "
#~ "specifying the ModelInstances."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`engineeringFeatures "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.engineeringFeatures>`\\"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`modelName "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.modelName>`\\"
#~ msgstr ""

#~ msgid ""
#~ "A String specifying the name of "
#~ "the model to which the assembly "
#~ "belongs."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`connectorOrientations "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.connectorOrientations>`\\"
#~ msgstr ""

#~ msgid "A ConnectorOrientationArray object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`sectionAssignments "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.sectionAssignments>`\\"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Surface "
#~ "<abaqus.Region.RegionAssembly.RegionAssembly.Surface>`\\ "
#~ "\\(\\[side1Faces\\, side2Faces\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a surface from "
#~ "a sequence of objects in a model"
#~ " database."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Set "
#~ "<abaqus.Region.RegionAssembly.RegionAssembly.Set>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`clashSets "
#~ "<abaqus.Region.RegionAssemblyBase.RegionAssemblyBase.clashSets>`\\ "
#~ "\\(arg1\\, arg2\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`deleteSets "
#~ "<abaqus.Region.RegionAssemblyBase.RegionAssemblyBase.deleteSets>`\\"
#~ " \\(setNames\\)"
#~ msgstr ""

#~ msgid "This command deletes the given sets from the assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`markSetInternal "
#~ "<abaqus.Region.RegionAssemblyBase.RegionAssemblyBase.markSetInternal>`\\"
#~ " \\(setName\\, internalSet\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`markSurfaceInternal "
#~ "<abaqus.Region.RegionAssemblyBase.RegionAssemblyBase.markSurfaceInternal>`\\"
#~ " \\(setName\\, internalSurface\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`isSetInternal "
#~ "<abaqus.Region.RegionAssemblyBase.RegionAssemblyBase.isSetInternal>`\\"
#~ " \\(setName\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`isSurfaceInternal "
#~ "<abaqus.Region.RegionAssemblyBase.RegionAssemblyBase.isSurfaceInternal>`\\"
#~ " \\(surfaceName\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`deleteSurfaces "
#~ "<abaqus.Region.RegionAssemblyBase.RegionAssemblyBase.deleteSurfaces>`\\"
#~ " \\(surfaceNames\\)"
#~ msgstr ""

#~ msgid "This command deletes the given surfaces from the assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Instance "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.Instance>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a PartInstance "
#~ "object and puts it into the "
#~ "instances repository."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`backup "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.backup>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method makes a backup copy of the features in the assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`clearGeometryCache "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.clearGeometryCache>`\\ "
#~ "\\(\\)"
#~ msgstr ""

#~ msgid "This method deletes the geometry cache."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`deleteAllFeatures "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.deleteAllFeatures>`\\ "
#~ "\\(\\)"
#~ msgstr ""

#~ msgid "This method deletes all the features in the assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`deleteFeatures "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.deleteFeatures>`\\ "
#~ "\\(featureNames\\)"
#~ msgstr ""

#~ msgid "This method deletes specified features from the assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`excludeFromSimulation "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.excludeFromSimulation>`\\"
#~ " \\(instances\\, exclude\\)"
#~ msgstr ""

#~ msgid "This method excludes the specified part instances from the analysis."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`featurelistInfo "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.featurelistInfo>`\\ "
#~ "\\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method prints the name and "
#~ "status of all the features in the"
#~ " feature lists."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getMassProperties "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.getMassProperties>`\\ "
#~ "\\(\\[regions\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method returns the mass properties"
#~ " of the assembly, or instances or "
#~ "regions."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getAngle "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.getAngle>`\\ "
#~ "\\(plane1\\, plane2\\, line1\\, line2\\[\\, "
#~ "...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getCoordinates "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.getCoordinates>`\\ "
#~ "\\(entity\\[\\, csys\\]\\)"
#~ msgstr ""

#~ msgid "This method returns the coordinates of a specified point."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getDistance "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.getDistance>`\\ "
#~ "\\(entity1\\, entity2\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getFacesAndVerticesOfAttachmentLines "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.getFacesAndVerticesOfAttachmentLines>`\\"
#~ " \\(edges\\)"
#~ msgstr ""

#~ msgid ""
#~ "Given an array of edge objects, "
#~ "this method returns a tuple of "
#~ "dictionary objects."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`getSurfaceSections "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.getSurfaceSections>`\\ "
#~ "\\(surface\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method returns a list of the"
#~ " sections assigned to the regions "
#~ "encompassed by the specified surface."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`importEafFile "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.importEafFile>`\\ "
#~ "\\(filename\\[\\, ids\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method imports an assembly from "
#~ "an EAF file into the root "
#~ "assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`importParasolidFile "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.importParasolidFile>`\\ "
#~ "\\(filename\\[\\, ids\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method imports an assembly from "
#~ "the Parasolid file into the root "
#~ "assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`importCatiaV5File "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.importCatiaV5File>`\\ "
#~ "\\(filename\\[\\, ids\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method imports an assembly from "
#~ "a CATIA V5 Elysium Neutral file "
#~ "into the root assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`importEnfFile "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.importEnfFile>`\\ "
#~ "\\(filename\\[\\, ids\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method imports an assembly from "
#~ "an Elysium Neutral file created by "
#~ "Pro/ENGINEER, I-DEAS, or CATIA V5 into"
#~ " the root assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`importIdeasFile "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.importIdeasFile>`\\ "
#~ "\\(filename\\[\\, ids\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method imports an assembly from "
#~ "an I-DEAS Elysium Neutral file into "
#~ "the root assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`importProEFile "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.importProEFile>`\\ "
#~ "\\(filename\\[\\, ids\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method imports an assembly from "
#~ "a Pro/ENGINEER Elysium Neutral file into"
#~ " the root assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`makeDependent "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.makeDependent>`\\ "
#~ "\\(instances\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method converts the specified part"
#~ " instances from independent to dependent"
#~ " part instances."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`makeIndependent "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.makeIndependent>`\\ "
#~ "\\(instances\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method converts the specified part"
#~ " instances from dependent to independent"
#~ " part instances."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`printAssignedSections "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.printAssignedSections>`\\"
#~ " \\(\\)"
#~ msgstr ""

#~ msgid "This method prints a summary of assigned connector sections."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`printConnectorOrientations "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.printConnectorOrientations>`\\"
#~ " \\(\\)"
#~ msgstr ""

#~ msgid "This method prints a summary of connector orientations."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`projectReferencesOntoSketch "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.projectReferencesOntoSketch>`\\"
#~ " \\(sketch\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method projects the specified "
#~ "edges, vertices, and datum points from"
#~ " the assembly onto the specified "
#~ "ConstrainedSketch object."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`queryCachedStates "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.queryCachedStates>`\\ "
#~ "\\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method displays the position of "
#~ "geometric states relative to the "
#~ "sequence of features in the assembly "
#~ "cache."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`regenerate "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.regenerate>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method regenerates the assembly and"
#~ " brings it up to date with the"
#~ " latest values of the assembly "
#~ "parameters."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`regenerationWarnings "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.regenerationWarnings>`\\"
#~ " \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`restore "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.restore>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`resumeAllFeatures "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.resumeAllFeatures>`\\ "
#~ "\\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method resumes all the suppressed"
#~ " features in the part or assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`resumeFeatures "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.resumeFeatures>`\\ "
#~ "\\(featureNames\\)"
#~ msgstr ""

#~ msgid "This method resumes the specified suppressed features in the assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`resumeLastSetFeatures "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.resumeLastSetFeatures>`\\"
#~ " \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method resumes the last set "
#~ "of features to be suppressed in "
#~ "the assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`rotate "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.rotate>`\\ "
#~ "\\(instanceList\\, axisPoint\\, ...\\)"
#~ msgstr ""

#~ msgid "This method rotates given instances by the specified amount."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`translate "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.translate>`\\ "
#~ "\\(instanceList\\, vector\\)"
#~ msgstr ""

#~ msgid "This method translates given instances by the specified amount."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`saveGeometryCache "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.saveGeometryCache>`\\ "
#~ "\\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method caches the current geometry,"
#~ " which improves regeneration performance."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`setValues "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.setValues>`\\ "
#~ "\\(regenerateConstraintsTogether\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method modifies the behavior "
#~ "associated with the specified assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`suppressFeatures "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.suppressFeatures>`\\ "
#~ "\\(featureNames\\)"
#~ msgstr ""

#~ msgid "This method suppresses specified features."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`unlinkInstances "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.unlinkInstances>`\\ "
#~ "\\(instances\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method converts the specified "
#~ "PartInstance objects from linked child "
#~ "instances to regular instances."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`writeAcisFile "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.writeAcisFile>`\\ "
#~ "\\(fileName\\[\\, version\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method exports the assembly to "
#~ "a named file in ACIS part (SAT)"
#~ " or assembly (ASAT) format."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`writeCADParameters "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.writeCADParameters>`\\ "
#~ "\\(paramFile\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`lock "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.lock>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method locks the assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`unlock "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.unlock>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "This method unlocks the assembly."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`setMeshNumberingControl "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.setMeshNumberingControl>`\\"
#~ " \\(instances\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method changes the start node "
#~ "and/or element labels on the specified"
#~ " independent part instances before or "
#~ "after Abaqus/CAE generates the meshes."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`copyMeshPattern "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.copyMeshPattern>`\\ "
#~ "\\(\\[elements\\, faces\\, ...\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`smoothNodes "
#~ "<abaqus.Assembly.AssemblyBase.AssemblyBase.smoothNodes>`\\ "
#~ "\\(\\[nodes\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`AttachmentLines "
#~ "<abaqus.Assembly.AssemblyFeature.AssemblyFeature.AttachmentLines>`\\"
#~ " \\(name\\, points\\, sourceFaces\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method creates a Feature object "
#~ "by creating attachment lines between the"
#~ " given set of source and target "
#~ "faces."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Coaxial "
#~ "<abaqus.Assembly.AssemblyFeature.AssemblyFeature.Coaxial>`\\ "
#~ "\\(movableAxis\\, fixedAxis\\, flip\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method moves an instance so "
#~ "that its selected face is coaxial "
#~ "with the selected face of a fixed"
#~ " instance."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`CoincidentPoint "
#~ "<abaqus.Assembly.AssemblyFeature.AssemblyFeature.CoincidentPoint>`\\"
#~ " \\(movablePoint\\, fixedPoint\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method moves an instance so "
#~ "that a specified point is coincident "
#~ "with a specified point of a fixed"
#~ " instance."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`EdgeToEdge "
#~ "<abaqus.Assembly.AssemblyFeature.AssemblyFeature.EdgeToEdge>`\\ "
#~ "\\(movableAxis\\, fixedAxis\\, flip\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method moves an instance so "
#~ "that its edge is parallel to an"
#~ " edge of a fixed instance."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`FaceToFace "
#~ "<abaqus.Assembly.AssemblyFeature.AssemblyFeature.FaceToFace>`\\ "
#~ "\\(movablePlane\\, fixedPlane\\, flip\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method moves an instance so "
#~ "that its face is coincident with a"
#~ " face of a fixed instance."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`ParallelCsys "
#~ "<abaqus.Assembly.AssemblyFeature.AssemblyFeature.ParallelCsys>`\\ "
#~ "\\(movableCsys\\, fixedCsys\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method moves an instance so "
#~ "that its Datum coordinate system is "
#~ "parallel to a Datum coordinate system"
#~ " of a fixed instance."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`ParallelEdge "
#~ "<abaqus.Assembly.AssemblyFeature.AssemblyFeature.ParallelEdge>`\\ "
#~ "\\(movableAxis\\, fixedAxis\\, flip\\)"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`ParallelFace "
#~ "<abaqus.Assembly.AssemblyFeature.AssemblyFeature.ParallelFace>`\\ "
#~ "\\(movablePlane\\, fixedPlane\\, flip\\)"
#~ msgstr ""

#~ msgid ""
#~ "This method moves an instance so "
#~ "that its face is parallel to a "
#~ "face of a fixed instance."
#~ msgstr ""

#~ msgid ""
#~ "This method creates a surface from "
#~ "a sequence of objects in a model"
#~ " database. The surface will apply to"
#~ " the sides specified by the "
#~ "arguments.For example "
#~ "surface=mdb.models['Model-1'].parts['Part-1'].Surface(side1Faces=side1Faces,"
#~ " name='Surf-1')"
#~ msgstr ""

#~ msgid "A Surface object."
#~ msgstr ""

#~ msgid "Bases: :py:class:`object`"
#~ msgstr ""

#~ msgid ""
#~ "The purpose of the Region object "
#~ "is to provide a link between an"
#~ " attribute and the geometric or "
#~ "discrete entities to which the attribute"
#~ " is applied. An attribute (Load, BC,"
#~ " IC, etc.) is applied to one or"
#~ " more Region objects; each Region "
#~ "object in turn is associated with "
#~ "a picked Set or Surface or with"
#~ " a named Set or Surface. The "
#~ "Region object provides a unified "
#~ "interface (or \"façade\") to data and"
#~ " functionality located at the Set or"
#~ " Surface. A script that applies an"
#~ " attribute to a picked Set or "
#~ "Surface requires the explicit creation "
#~ "of a Region object and will "
#~ "implicitly create a matching internal "
#~ "Set or Surface. Conversely, a script "
#~ "that applies an attribute to a "
#~ "named Set or Surface requires the "
#~ "explicit creation of that Set or "
#~ "Surface (see 39.4) and will implicitly"
#~ " create a region object. The "
#~ "reference between Region and Set/Surface "
#~ "is by name (user-provided or "
#~ "internal.) If the Set/Surface is "
#~ "suppressed, deleted, or renamed, the "
#~ "Region object will not be able to"
#~ " find the associated Set/Surface, and "
#~ "will communicate that to the attribute,"
#~ " but will not be affected otherwise."
#~ " If a Set/Surface with the same "
#~ "name becomes available (only possible "
#~ "with user-provided names) the Region "
#~ "object will re-establish the connection."
#~ " Another way of correcting this "
#~ "problem is to re-apply the "
#~ "attribute. Wherever a particular Load, "
#~ "BC, IC, etc. command accepts a "
#~ "named set or a named surface, that"
#~ " command will also accept a Region"
#~ " object. For example::"
#~ msgstr ""

#~ msgid ""
#~ "Abaqus does not provide a regions "
#~ "repository; as an alternative, you "
#~ "should assign a variable to a "
#~ "Region object and refer to the "
#~ "variable. The lifecycle of a Region "
#~ "object is similar to the lifecycle "
#~ "of a Leaf object used by display"
#~ " groups; as a result, you should "
#~ "use a Region object immediately after"
#~ " you create it. The contents of "
#~ "a Region object are not intended "
#~ "to survive regeneration. If you use "
#~ "an out-of-date Region object, the"
#~ " script is unlikely to function "
#~ "correctly. Querying an attribute's Region "
#~ "will return a Region tuple. The "
#~ "contents of the tuple are the set"
#~ " name followed by the owners of "
#~ "the set and three flags expressed "
#~ "as integers. The flags indicate the "
#~ "region space, the type of region "
#~ "and the whether the region is an"
#~ " internal set."
#~ msgstr ""

#~ msgid ""
#~ "Check `Region on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-regionpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid "Bases: :py:class:`~abaqus.Assembly.AssemblyBase.AssemblyBase`"
#~ msgstr ""

#~ msgid ""
#~ "The following commands operate on "
#~ "Assembly objects. For more information "
#~ "about the Assembly object, see Assembly"
#~ " object."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionAssemblyBase on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-assemblypyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "This command prints a message describing"
#~ " the relationship between the contents "
#~ "of two sets. Possible outcomes are:"
#~ msgstr ""

#~ msgid "Both sets are the same."
#~ msgstr ""

#~ msgid "Set 2 is a subset of set 1."
#~ msgstr ""

#~ msgid "Set 2 is a superset of set 1."
#~ msgstr ""

#~ msgid "Set 2 intersects set 1."
#~ msgstr ""

#~ msgid "Set 2 touches set 1 (their boundaries intersect)."
#~ msgstr ""

#~ msgid "Set 2 and set 1 are disjoint."
#~ msgstr ""

#~ msgid "This command accepts only positional arguments and has no keywords."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionAssemblyBase.clashSets on "
#~ "help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-assemblypyc.htm?contextscope=all"
#~ "#simaker-assemblyclashsetspyc>`__."
#~ msgstr ""

#~ msgid "A Set or Surface object specifying set 1."
#~ msgstr ""

#~ msgid "A Set or Surface object specifying set 2."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionAssemblyBase.deleteSets on "
#~ "help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-assemblypyc.htm?contextscope=all"
#~ "#simaker-assemblydeletesetspyc>`__."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Strings specifying the "
#~ "set names that will be deleted "
#~ "from the assembly."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionAssemblyBase.deleteSurfaces on "
#~ "help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-assemblypyc.htm?contextscope=all"
#~ "#simaker-assemblydeletesurfacespyc>`__."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Strings specifying the "
#~ "surface names that will be deleted "
#~ "from the assembly."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionAssemblyBase.isSetInternal on "
#~ "help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-assemblypyc.htm?contextscope=all"
#~ "#simaker-assemblyissetinternalpyc>`__."
#~ msgstr ""

#~ msgid "A string specifying the Set name."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionAssemblyBase.isSurfaceInternal on "
#~ "help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-assemblypyc.htm?contextscope=all"
#~ "#simaker-assemblyissurfaceinternalpyc>`__."
#~ msgstr ""

#~ msgid "A string specifying the Surface name."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionAssemblyBase.markSetInternal on "
#~ "help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-assemblypyc.htm?contextscope=all"
#~ "#simaker-assemblymarksetinternalpyc>`__."
#~ msgstr ""

#~ msgid "A Boolean specifying whether the Set should be marked as internal."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionAssemblyBase.markSurfaceInternal on "
#~ "help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-assemblypyc.htm?contextscope=all"
#~ "#simaker-assemblymarksurfaceinternalpyc>`__."
#~ msgstr ""

#~ msgid "A Boolean specifying whether the Surface should be marked as internal."
#~ msgstr ""

#~ msgid "Bases: :py:class:`~abaqus.Region.Region.Region`"
#~ msgstr ""

#~ msgid ""
#~ "If a set spans more than one "
#~ "part instance, the members **vertices**, "
#~ "**edges**, **faces**, **cells**, **elements**, "
#~ "or **nodes** return a sequence of "
#~ "all the queried "
#~ "vertices/edges/faces/cells/elements/nodes respectively for"
#~ " each part instance contained in the"
#~ " set. For example::"
#~ msgstr ""

#~ msgid ""
#~ "Check `Set on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-setpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "Check `MapSetsFromOdb on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-mapsetsfromodbpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "Check `SetFromColor on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-setfromcolorpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "Check `SetFromElementLabels on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-setfromelementlabelspyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "Check `SetFromNodeLabels on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-setfromnodelabelspyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid "A CellArray object."
#~ msgstr ""

#~ msgid "An EdgeArray object."
#~ msgstr ""

#~ msgid "A MeshElementArray object."
#~ msgstr ""

#~ msgid "A FaceArray object."
#~ msgstr ""

#~ msgid "A MeshNodeArray object."
#~ msgstr ""

#~ msgid "A ReferencePointArray object."
#~ msgstr ""

#~ msgid "A VertexArray object."
#~ msgstr ""

#~ msgid ""
#~ "The Surface object stores surfaces "
#~ "selected from the assembly. A surface"
#~ " is comprised of geometric or "
#~ "discrete entities but not both. An "
#~ "instance of a Surface object is "
#~ "available from the **surface** member of"
#~ " the Assembly object."
#~ msgstr ""

#~ msgid ""
#~ "Check `Surface on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-surfacepyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "This method creates a surface by "
#~ "performing a boolean operation on two"
#~ " or more input surfaces."
#~ msgstr ""

#~ msgid "A sequence of Surface objects."
#~ msgstr ""

#~ msgid ""
#~ "A SymbolicConstant specifying the boolean "
#~ "operation to perform. Possible values "
#~ "are UNION, INTERSECTION, and DIFFERENCE. "
#~ "The default value is UNION. Note "
#~ "that if DIFFERENCE is specified, the "
#~ "order of the given input surfaces "
#~ "is important; All surfaces specified "
#~ "after the first one are subtracted "
#~ "from the first one."
#~ msgstr ""

#~ msgid ""
#~ "This method creates a surface from "
#~ "a sequence of element sets in a"
#~ " model database."
#~ msgstr ""

#~ msgid ""
#~ "Check `SurfaceFromElsets on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-surfacefromelsetspyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of element sets. For "
#~ "example::      elementSetSeq=((elset1, S1),(elset2, "
#~ "S2))      where "
#~ "``elset1=mdb.models[name].rootAssembly.sets['Clutch']``     and"
#~ " ``S1`` and ``S2`` indicate the side"
#~ " of the element set."
#~ msgstr ""

#~ msgid "A sequence of element sets. For example::"
#~ msgstr ""

#~ msgid ""
#~ "A tuple of Ints specifying the "
#~ "instances. This member is not applicable"
#~ " for a Surface object on an "
#~ "output database."
#~ msgstr ""

#~ msgid ""
#~ "A tuple of SymbolicConstants specifying "
#~ "the sides; for example, (SIDE1, SIDE2)."
#~ msgstr ""

#~ msgid "Bases: :py:class:`~abaqus.Part.PartBase.PartBase`"
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionPartBase on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-partpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionPartBase.clashSets on help.3ds.com/2023"
#~ " "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-partpyc.htm?contextscope=all"
#~ "#simaker-partclashsetspyc>`__."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionPartBase.deleteSets on "
#~ "help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-partpyc.htm?contextscope=all"
#~ "#simaker-partdeletesetspyc>`__."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Strings specifying the "
#~ "set names that will be deleted "
#~ "from the part."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionPartBase.deleteSurfaces on "
#~ "help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-partpyc.htm?contextscope=all"
#~ "#simaker-partdeletesurfacespyc>`__."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Strings specifying the "
#~ "surface names that will be deleted "
#~ "from the part."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionPartBase.isSetInternal on "
#~ "help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-partpyc.htm?contextscope=all"
#~ "#simaker-partissetinternalpyc>`__."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionPartBase.isSurfaceInternal on "
#~ "help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-partpyc.htm?contextscope=all"
#~ "#simaker-partissurfaceinternalpyc>`__."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionPartBase.markSetInternal on "
#~ "help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-partpyc.htm?contextscope=all"
#~ "#simaker-partmarksetinternalpyc>`__."
#~ msgstr ""

#~ msgid ""
#~ "Check `RegionPartBase.markSurfaceInternal on "
#~ "help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-partpyc.htm?contextscope=all"
#~ "#simaker-partmarksurfaceinternalpyc>`__."
#~ msgstr ""

#~ msgid ""
#~ "The Skin object stores information on"
#~ " skin reinforcements created on entities."
#~ msgstr ""

#~ msgid ""
#~ "Check `Skin on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-skinpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Face objects specifying"
#~ " the faces on which skins should "
#~ "be created. Applicable to three and "
#~ "two dimensional parts."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshFace objects "
#~ "specifying the mesh faces on which "
#~ "skins should be created. Applicable to"
#~ " three and two dimensional parts."
#~ msgstr ""

#~ msgid "A Skin object."
#~ msgstr ""

#~ msgid ""
#~ "Check `EditSkin on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-editskinpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "The Stringer object stores information "
#~ "on stringer reinforcements created on "
#~ "entities."
#~ msgstr ""

#~ msgid ""
#~ "Check `Stringer on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-stringerpyc.htm?contextscope=all>`__."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of Edge objects specifying"
#~ " the edges on which stringers should"
#~ " be created. Applicable to three and"
#~ " two dimensional parts."
#~ msgstr ""

#~ msgid ""
#~ "A sequence of MeshEdge objects "
#~ "specifying the mesh edges on which "
#~ "stringers should be created. Applicable "
#~ "to three and two dimensional parts."
#~ msgstr ""

#~ msgid "A Stringer object."
#~ msgstr ""

#~ msgid ""
#~ "This method modifies underlying entities "
#~ "of the selected stringer. At least "
#~ "one of the optional arguments needs "
#~ "to be specified."
#~ msgstr ""

#~ msgid ""
#~ "Check `EditStringer on help.3ds.com/2023 "
#~ "<https://help.3ds.com/2023/English/DSSIMULIA_Established/SIMACAEKERRefMap/simaker-c-editstringerpyc.htm?contextscope=all>`__."
#~ msgstr ""

